@page "/"
@using Core.Entitites
@using WebUI.CustomComponents
@using Core
@using Core.ExcelHandling
@using NPOI.OpenXml4Net.Exceptions

<h1>Bom Comparison</h1>
<MudGrid>
    <MudItem xs="12" sm="6">
        <DragAndDropUpload HintText="Source BOM (.xls | .xlsx)" OnFileSelected="ReadSourceBomFile"/>
    </MudItem>
    <MudItem xs="12" sm="6">
        <DragAndDropUpload HintText="Target BOM (.xls | .xlsx)" OnFileSelected="ReadTargetBomFile"/>
    </MudItem>
    <MudItem xs="12">
        <DownloadStreamAsFileButton FileName="@_downloadFileName" FileContentStream="@_downloadStream" Text="Download comparison"/>
    </MudItem>
    <MudItem xs="12">
        <BomComparisonPreviewTable ComparedBom="_comparedBom"/>
    </MudItem>
</MudGrid>

@inject ISnackbar Snackbar
@inject IExcelReader ExcelReader
@inject IExcelWriter ExcelWriter
@inject IBomComparisonService BomComparisonService

@code {
    private Bom? _sourceBom;
    private Bom? _targetBom;
    private ComparedBom? _comparedBom;
    private Stream? _downloadStream;
    private string? _downloadFileName;
    
    private async Task<Stream> GetMemoryStreamFromIBrowserFile(IBrowserFile file)
    {
        var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Position = 0;
        return memoryStream;
    }    
    
    private async Task ReadBomFile(IBrowserFile file, Action<Bom> onSuccess)
    {
        try
        {
            var memoryStream = await GetMemoryStreamFromIBrowserFile(file);
            onSuccess(ExcelReader.ReadBom(memoryStream, file.Name));
            Snackbar.Add($"Successfully read lines from BOM file: {file.Name}", Severity.Success);
            if (_sourceBom is not null && _targetBom is not null)
                CompareBoms();
        }
        catch (InvalidFormatException)
        {
            Snackbar.Add("Invalid file format. Please make sure you're uploading an excel file (.xls, .xlsx)", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error reading BOM file: {e.Message}", Severity.Error);
        }
    }

    private Task ReadSourceBomFile(IBrowserFile file)
    {
        return ReadBomFile(file, bomLines => _sourceBom = bomLines);
    }

    private Task ReadTargetBomFile(IBrowserFile file)
    {
        return ReadBomFile(file, bomLines => _targetBom = bomLines);
    }
    
    private void CompareBoms()
    {
        if(_sourceBom is null || _targetBom is null)
            return;
        
        _comparedBom = BomComparisonService.CompareBom(_sourceBom, _targetBom);
        PrepareComparisonResultForDownload();
    }
    
    private void PrepareComparisonResultForDownload()
    {
        if (_comparedBom is null)
        {
            Snackbar.Add("No comparison result to download", Severity.Error);
            return;
        }

        _downloadStream = ExcelWriter.WriteBomComparisonToStream(_comparedBom);
        _downloadFileName = $"BomComparisonResult_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.xlsx";
        Snackbar.Add("Comparison result ready for download", Severity.Success);
        
        StateHasChanged();
    }
}
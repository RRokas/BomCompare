@page "/"
@using Core.Entitites
@using WebUI.CustomComponents
@using Core
@using Core.ExcelHandling
@using NPOI.OpenXml4Net.Exceptions
@using System.Diagnostics

<h1>Bom Comparison</h1>
<MudGrid>
    <MudItem xs="12" sm="6">
        <DragAndDropUpload HintText="Source BOM (.xls | .xlsx)" OnFileSelected="ReadSourceBomFile"/>
    </MudItem>
    <MudItem xs="12" sm="6">
        <DragAndDropUpload HintText="Target BOM (.xls | .xlsx)" OnFileSelected="ReadTargetBomFile"/>
    </MudItem>
    <MudItem xs="12">
        @if (!_downloadReady && _sourceBom is not null && _targetBom is not null)
        {
            <MudText>
                <MudProgressCircular Size="Size.Small" Color="Color.Default" Indeterminate="true"/>
                Preparing download...
            </MudText>
        }
        else if(_downloadReady)
        {
            <DownloadStreamAsFileButton FileName="@_downloadFileName" FileContentStream="@_downloadStream" Text="Download comparison"/>
        }
    </MudItem>
    <MudItem xs="12">
        @if (_comparisonReady)
        {
            <BomComparisonPreviewTable ComparedBom="_comparedBom"/>
        }
    </MudItem>
</MudGrid>

@inject ISnackbar Snackbar
@inject IExcelReader ExcelReader
@inject IExcelWriter ExcelWriter
@inject IBomComparisonService BomComparisonService
@inject ILogger<BomComparison> Logger

@code {
    private Bom? _sourceBom;
    private Bom? _targetBom;
    private ComparedBom? _comparedBom;
    private bool _comparisonReady;
    private bool _downloadReady;
    private Stream? _downloadStream;
    private string? _downloadFileName;

    private void ResetComparisonStatuses()
    {
        _comparisonReady = false;
        _downloadReady = false;
    }
    
    private async Task<Stream> GetMemoryStreamFromIBrowserFile(IBrowserFile file)
    {
        var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Position = 0;
        return memoryStream;
    }

    private async Task ReadBomFile(IBrowserFile file, Action<Bom> onSuccess)
    {
        try
        {
            var memoryStream = await GetMemoryStreamFromIBrowserFile(file);
            onSuccess(ExcelReader.ReadBom(memoryStream, file.Name));
            Snackbar.Add($"Successfully read lines from BOM file: {file.Name}", Severity.Success);
            if (_sourceBom is not null && _targetBom is not null)
                CompareBoms();
        }
        catch (InvalidFormatException)
        {
            Snackbar.Add("Invalid file format. Please make sure you're uploading an excel file (.xls, .xlsx)", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error reading BOM file: {e.Message}", Severity.Error);
        }
    }

    private Task ReadSourceBomFile(IBrowserFile file)
    {
        ResetComparisonStatuses();
        return ReadBomFile(file, bomLines => _sourceBom = bomLines);
    }

    private Task ReadTargetBomFile(IBrowserFile file)
    {
        ResetComparisonStatuses();
        return ReadBomFile(file, bomLines => _targetBom = bomLines);
    }

    private void CompareBoms()
    {
        if (_sourceBom is null || _targetBom is null)
            return;
        
        var comparisonGuid = Guid.NewGuid();
        var stopwatch = Stopwatch.StartNew();
        _comparedBom = BomComparisonService.CompareBom(_sourceBom, _targetBom);
        Logger.LogInformation($"{comparisonGuid} Bom comparison took {stopwatch.ElapsedMilliseconds}ms." +
                              $" Compared {_sourceBom.BomLines.Count} lines from source BOM with {_targetBom.BomLines.Count} lines from target BOM.");
        
        stopwatch.Restart();
        _ = PrepareComparisonResultForDownload();
        Logger.LogInformation($"{comparisonGuid} Download prepared in {stopwatch.ElapsedMilliseconds}ms.");
        
        _comparisonReady = true;
        StateHasChanged();
    }

    private async Task PrepareComparisonResultForDownload()
    {
        if (_comparedBom is null)
        {
            Snackbar.Add("No comparison result to download", Severity.Error);
            return;
        }

        _downloadStream = await Task.Run(() =>
            ExcelWriter.WriteBomComparisonToStream(_comparedBom));

        _downloadFileName = $"BomComparisonResult_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.xlsx";
        Snackbar.Add("Comparison result ready for download", Severity.Success);

        _downloadReady = true;
        StateHasChanged();
    }

}
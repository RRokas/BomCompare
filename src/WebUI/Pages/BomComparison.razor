@page "/"
@using Core.Entitites
@using WebUI.CustomComponents
@using Core

<h1>Bom Comparison</h1>
<MudGrid>
    <MudItem xs="12" sm="6">
        <DragAndDropUpload HintText="Source BOM (.xls | .xlsx)" OnFileSelected="ReadSourceBomFile"/>
    </MudItem>
    <MudItem xs="12" sm="6">
        <DragAndDropUpload HintText="Target BOM (.xls | .xlsx)" OnFileSelected="ReadTargetBomFile"/>
    </MudItem>
    <MudItem xs="12">
        <DownloadStreamAsFileButton FileName="@_downloadFileName" FileContentStream="@_downloadStream" Text="Download comparison"/>
    </MudItem>
    <MudItem xs="12">
        <BomComparisonPreviewTable ComparedBomLines="_comparedBomLines"/>
    </MudItem>
</MudGrid>

@inject ISnackbar Snackbar
@inject IExcelReader ExcelReader
@inject IExcelWriter ExcelWriter
@inject IBomComparisonService BomComparisonService

@code {
    private List<BomLine>? _sourceBomLines;
    private List<BomLine>? _targetBomLines;
    private List<ComparedBomLine>? _comparedBomLines;
    private Stream? _downloadStream;
    private string? _downloadFileName;
    
    private async Task<Stream> GetMemoryStreamFromIBrowserFile(IBrowserFile file)
    {
        var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Position = 0;
        return memoryStream;
    }    

    private async Task ReadSourceBomFile(IBrowserFile file)
    {
        var memoryStream = await GetMemoryStreamFromIBrowserFile(file);
        _sourceBomLines = ExcelReader.ReadBom(memoryStream);
        Snackbar.Add($"Successfully read {_sourceBomLines.Count} lines from source BOM file", Severity.Success);
        if (_sourceBomLines is not null && _targetBomLines is not null)
            CompareBoms();
    }
    
    private async Task ReadTargetBomFile(IBrowserFile file)
    {
        var memoryStream = await GetMemoryStreamFromIBrowserFile(file);
        _targetBomLines = ExcelReader.ReadBom(memoryStream);
        Snackbar.Add($"Successfully read {_targetBomLines.Count} lines from target BOM file", Severity.Success);
        if (_sourceBomLines is not null && _targetBomLines is not null)
            CompareBoms();
    }
    
    private void CompareBoms()
    {
        _comparedBomLines = BomComparisonService.CompareBom(_sourceBomLines, _targetBomLines);
        Snackbar.Add($"Successfully compared {_sourceBomLines.Count} lines from source BOM file with {_targetBomLines.Count} lines from target BOM file", Severity.Success);
        PrepareComparisonResultForDownload();
    }
    
    private void PrepareComparisonResultForDownload()
    {
        if (_comparedBomLines is null)
        {
            Snackbar.Add("No comparison result to download", Severity.Error);
            return;
        }

        _downloadStream = ExcelWriter.WriteBomToStream(_comparedBomLines);
        _downloadFileName = $"BomComparisonResult_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.xlsx";
        Snackbar.Add("Comparison result ready for download", Severity.Success);
        
        StateHasChanged();
    }
}